{
  "hash": "f928b86a403ba5c01975775579c0df2a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Inference for Comparing Two Paired Means\"\nauthor: \"Anusha\"\ndate: \"10-18-24\"\n---\n\n\n\n# Introduction\n\n## What is paired data?\n\nThis module focuses on comparing data collected from the same set of individual categories. And in this case, we treat this data as paired since they correspond to the same set of observable entities.\n\nFor working with this type of data, we would use the difference between the means of the two sets.\n\nSetting up the packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n\tlearnr::run_tutorial(\"introduction\", package = \"ggformula\")\n\tlearnr::run_tutorial(\"refining\", package = \"ggformula\")\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom) # Tidy Test data\nlibrary(resampledata3) # Datasets from Chihara and Hesterberg's book\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'resampledata3'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(gt)\nlibrary(patchwork) # Arranging Plots\nlibrary(ggprism) # Interesting Categorical Axes\nlibrary(supernova)# for tables\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n```\n\n\n:::\n:::\n\n\n\n## Case Study 1: Results from a Diving Championship\n\n### Inspecting and Charting Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"Diving2017\", package = \"resampledata3\")\nDiving2017\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     Name     Country Semifinal  Final\n1        CHEONG Jun Hoong    Malaysia    325.50 397.50\n2                SI Yajie       China    382.80 396.00\n3                REN Qian       China    367.50 391.95\n4              KIM Mi Rae North Korea    346.00 385.55\n5              WU Melissa   Australia    318.70 370.20\n6           KIM Kuk Hyang North Korea    360.85 360.00\n7         ITAHASHI Minami       Japan    313.70 357.85\n8        BENFEITO Meaghan      Canada    355.15 331.40\n9          PAMG Pandelela    Malaysia    322.75 322.40\n10        CHAMANDY Olivia      Canada    320.55 307.15\n11       PARRATTO Jessica         USA    322.75 302.35\n12 MURILLO URREA Carolina    Colombia    325.75 283.35\n```\n\n\n:::\n\n```{.r .cell-code}\nDiving2017_inspect <- inspect(Diving2017)\nDiving2017_inspect$categorical\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  name    class  levels     n missing distribution                              \n  <chr>   <chr>   <int> <int>   <int> <chr>                                     \n1 Name    factor     12    12       0 \" SI Yajie (8.3%) ...                    …\n2 Country factor      8    12       0 \"Canada (16.7%), China (16.7%) ...       …\n```\n\n\n:::\n\n```{.r .cell-code}\nDiving2017_inspect$quantitative\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 11\n  name      class     min    Q1 median    Q3   max  mean    sd     n missing\n* <chr>     <chr>   <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <int>   <int>\n1 Semifinal numeric  314.  322.   326.  357.  383.  338.  22.9    12       0\n2 Final     numeric  283.  319.   359.  387.  398.  350.  40.0    12       0\n```\n\n\n:::\n:::\n\n\n\nConverting into long form:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDiving2017_long <- Diving2017 %>%\n  pivot_longer(\n    cols = c(Final, Semifinal),\n    names_to = \"race\",\n    values_to = \"scores\"\n  )\nDiving2017_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 4\n   Name               Country     race      scores\n   <fct>              <fct>       <chr>      <dbl>\n 1 \"CHEONG Jun Hoong\" Malaysia    Final       398.\n 2 \"CHEONG Jun Hoong\" Malaysia    Semifinal   326.\n 3 \" SI Yajie\"        China       Final       396 \n 4 \" SI Yajie\"        China       Semifinal   383.\n 5 \"REN Qian\"         China       Final       392.\n 6 \"REN Qian\"         China       Semifinal   368.\n 7 \"KIM Mi Rae\"       North Korea Final       386.\n 8 \"KIM Mi Rae\"       North Korea Semifinal   346 \n 9 \"WU Melissa\"       Australia   Final       370.\n10 \"WU Melissa\"       Australia   Semifinal   319.\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\n\nHistograms and Densities of the 2 variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDiving2017_long %>%\n  gf_density(~scores,\n    fill = ~race,\n    alpha = 0.5,\n    title = \"Diving Scores\"\n  ) %>%\n  gf_facet_grid(~race) %>%\n  gf_fitdistr(dist = \"dnorm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDiving2017_long %>%\n  gf_col(\n    fct_reorder(Name, scores) ~ scores, #decreasing order of scores -> code is wrong(not ordered in decreasing order because of the long form of data set)\n    fill = ~race,\n    alpha = 0.5,\n    position = \"dodge\",\n    xlab = \"Scores\",\n    ylab = \"Name\",\n    title = \"Diving Scores\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDiving2017_long %>%\n  gf_boxplot(\n    scores ~ race,\n    fill = ~race,\n    alpha = 0.5,\n    xlab = \"Race\",\n    ylab = \"Scores\",\n    title = \"Diving Scores\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n**Insights:**\n\n-   We can see that, the data is not normally distributed (not Gaussian).\n\n-   Even though the medians appear to be different, but since the box plots overlap, we cannot conclude that the means of the two race timings are different.\n\n## Check for Normality\n\nshapiro.wilk test checks whether a quant variable is from a normal distribution.\n\nOur Null Hypothesis is that the data is from a normal distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(Diving2017$Final)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  Diving2017$Final\nW = 0.9184, p-value = 0.273\n```\n\n\n:::\n\n```{.r .cell-code}\nshapiro.test(Diving2017$Semifinal)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  Diving2017$Semifinal\nW = 0.86554, p-value = 0.05738\n```\n\n\n:::\n:::\n\n\n\nIf p value is very small, it is not a normal distribution.\n\nIf p value is large, it is a normal distribution.\n\n## Hypothesis\n\n-   Semi final mean = Final mean\n\n-   Semi final mean not = Final mean\n\n## Observed and Test Statistic\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobs_diff_swim <- diffmean(scores ~ race,\n  data = Diving2017_long,\n  only.2 = FALSE\n) # paired data\n\n# Can use this also\n# formula method is better for permutation test!\n# obs_diff_swim <- mean(~ (Final - Semifinal), data = Diving2017)\n\nobs_diff_swim\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndiffmean \n -11.975 \n```\n\n\n:::\n:::\n\n\n\ndiffmean: Splits the score column into semifinal and final and get the difference in mean.\n\nonly.2: take the data paired wise and not at random\n\n## Inference\n\n-   t-test:\n\n    -   This code shuffles the scores pair wise.\n\n    -   The polarity of differences are shuffled.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmosaic::t.test(\n  x = Diving2017$Semifinal,\n  y = Diving2017$Final,\n  paired = TRUE, var.equal = FALSE\n) %>% broom::tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  estimate statistic p.value parameter conf.low conf.high method     alternative\n     <dbl>     <dbl>   <dbl>     <dbl>    <dbl>     <dbl> <chr>      <chr>      \n1    -12.0     -1.19   0.259        11    -34.1      10.2 Paired t-… two.sided  \n```\n\n\n:::\n:::\n\n\n\n#### \n\n# **Comparing Multiple Means with ANOVA**\n\nLet is import and read this data set.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrogs_orig <- read_csv(\"../../Data/frogs.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): Frogspawn sample id, Temperature13, Temperature18, Temperature25\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nfrogs_orig\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 4\n   `Frogspawn sample id` Temperature13 Temperature18 Temperature25\n                   <dbl>         <dbl>         <dbl>         <dbl>\n 1                     1            24            NA            NA\n 2                     2            NA            21            NA\n 3                     3            NA            NA            18\n 4                     4            26            NA            NA\n 5                     5            NA            22            NA\n 6                     6            NA            NA            14\n 7                     7            27            NA            NA\n 8                     8            NA            22            NA\n 9                     9            NA            NA            15\n10                    10            27            NA            NA\n# ℹ 50 more rows\n```\n\n\n:::\n:::\n\n\n\n### What is the research question?\n\nBased on the sample dataset at hand, how does frogspawn hatching time vary with different temperature settings?\n\nResponse Variable: Hatching time\n\nExplanatory Variable : Temperatures\n\n## Clean the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrogs_orig %>%\n  pivot_longer(\n    .,\n    cols = starts_with(\"Temperature\"),\n    cols_vary = \"fastest\",\n    # new in pivot_longer\n    names_to = \"Temp\",\n    values_to = \"Time\"\n  ) %>%\n  drop_na() %>%\n  ##\n  separate_wider_regex(\n    cols = Temp,\n    # knock off the unnecessary \"Temperature\" word\n    # Just keep the digits thereafter\n    patterns = c(\"Temperature\", TempFac = \"\\\\d+\"),\n    cols_remove = TRUE\n  ) %>%\n  # Convert Temp into TempFac, a 3-level factor\n  mutate(TempFac = factor(\n    x = TempFac,\n    levels = c(13, 18, 25),\n    labels = c(\"13\", \"18\", \"25\")\n  )) %>%\n  rename(\"Id\" = `Frogspawn sample id`) -> frogs_long\nfrogs_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 × 3\n      Id TempFac  Time\n   <dbl> <fct>   <dbl>\n 1     1 13         24\n 2     2 18         21\n 3     3 25         18\n 4     4 13         26\n 5     5 18         22\n 6     6 25         14\n 7     7 13         27\n 8     8 18         22\n 9     9 25         15\n10    10 13         27\n# ℹ 50 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n##\nfrogs_long %>% count(TempFac)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  TempFac     n\n  <fct>   <int>\n1 13         20\n2 18         20\n3 25         20\n```\n\n\n:::\n:::\n\n\n\n-   There are some columns with NA, since not all spawns (in each dish) can be subjected to different temperatures.\n\n-   We get all the temperatures into one single column. And this is converted into a factor.\n\n-   regex -\\> regular expression\n\n### Plotting Graphs\n\n-   **Histogram**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~Time,\n  fill = ~TempFac,\n  data = frogs_long, alpha = 0.5\n) %>%\n  gf_vline(xintercept = ~ mean(Time)) %>%\n  gf_labs(\n    title = \"Histograms of Hatching Time Distributions vs Temperature\",\n    x = \"Hatching Time\", y = \"Count\"\n  ) %>%\n  gf_text(7 ~ (mean(Time) + 2),\n    label = \"Overall Mean\"\n  ) %>%\n  gf_refine(guides(fill = guide_legend(title = \"Temperature level (°C)\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n-   **Box Plot**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_boxplot(\n  data = frogs_long,\n  Time ~ TempFac,\n  fill = ~TempFac,\n  alpha = 0.5\n) %>%\n  gf_vline(xintercept = ~ mean(Time)) %>%\n  gf_labs(\n    title = \"Boxplots of Hatching Time Distributions vs Temperature\",\n    x = \"Temperature\", y = \"Hatching Time\",\n    caption = \"Using ggprism\"\n  ) %>%\n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Temperature level (°C)\"))\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nSince, the histograms look well separated and the box plots show little overlap, we can say that Temperature has a significant effect on Hatching time.\n\n## Anova Test (Analysis Of Variance)\n\nThis line of code, creates an ANOVA model object called frog_anova.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrogs_anova <- aov(Time ~ TempFac, data = frogs_long)\nfrogs_anova\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\n   aov(formula = Time ~ TempFac, data = frogs_long)\n\nTerms:\n                 TempFac Residuals\nSum of Squares  1020.933    75.400\nDeg. of Freedom        2        57\n\nResidual standard error: 1.150133\nEstimated effects may be unbalanced\n```\n\n\n:::\n:::\n\n\n\nWe examine this using a package called 'supernova'.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupernova::pairwise(frogs_anova,\n  correction = \"Bonferroni\", # Try \"Tukey\"\n  alpha = 0.05, # 95% CI calculation\n  var_equal = TRUE, # We'll see\n  plot = TRUE\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nModel: Time ~ TempFac\n```\n\n\n:::\n\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTempFac\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLevels: 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFamily-wise error-rate: 0.049\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  group_1 group_2    diff pooled_se       t    df   lower  upper p_adj\n  <chr>   <chr>     <dbl>     <dbl>   <dbl> <int>   <dbl>  <dbl> <dbl>\n1 18      13       -5.300     0.257 -20.608    57  -5.861 -4.739 .0000\n2 25      13      -10.100     0.257 -39.272    57 -10.661 -9.539 .0000\n3 25      18       -4.800     0.257 -18.664    57  -5.361 -4.239 .0000\n```\n\n\n:::\n:::\n\n\n\n-   x-axis is the difference between means.\n\n-   The black points are the difference of means of each of the 3 groups -\\> x-y\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}